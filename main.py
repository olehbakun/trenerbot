import os
import logging
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)

(META, GENDER, AGE, WEIGHT, HEIGHT, LEVEL, MENU) = range(7)
user_data = {}

meta_keyboard = ReplyKeyboardMarkup([["üí™ –ù–∞–±—ñ—Ä –º–∞—Å–∏", "‚öñÔ∏è –°—Ö—É–¥–Ω–µ–Ω–Ω—è", "üß© –Ü–Ω—à–µ"]], resize_keyboard=True)
gender_keyboard = ReplyKeyboardMarkup([["üë® –ß–æ–ª–æ–≤—ñ–∫", "üë© –ñ—ñ–Ω–∫–∞"]], resize_keyboard=True)
level_keyboard = ReplyKeyboardMarkup([["üìó –ü–æ—á–∞—Ç–∫–æ–≤–∏–π", "üìò –°–µ—Ä–µ–¥–Ω—ñ–π", "üìï –ü—Ä–æ—Å—É–Ω—É—Ç–∏–π"]], resize_keyboard=True)
menu_keyboard = ReplyKeyboardMarkup([["üß† –Ü–Ω—à–µ –ø–∏—Ç–∞–Ω–Ω—è"]], resize_keyboard=True)

logging.basicConfig(level=logging.INFO)

def save_user(uid, key, value):
    if uid not in user_data:
        user_data[uid] = {}
    user_data[uid][key] = value

def get_profile(uid):
    return user_data.get(uid, {})

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø —Ñ—ñ—Ç–Ω–µ—Å-–±–æ—Ç. –û–±–µ—Ä–∏ –º–µ—Ç—É:", reply_markup=meta_keyboard)
    return META

async def set_meta(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_user(update.effective_user.id, "meta", update.message.text)
    await update.message.reply_text("–û–∫–µ–π! –¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏ —Å—Ç–∞—Ç—å:", reply_markup=gender_keyboard)
    return GENDER

async def set_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_user(update.effective_user.id, "gender", update.message.text)
    await update.message.reply_text("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")
    return AGE

async def set_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_user(update.effective_user.id, "age", update.message.text)
    await update.message.reply_text("–Ø–∫–∞ —Ç–≤–æ—è –≤–∞–≥–∞ –≤ –∫–≥?")
    return WEIGHT

async def set_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_user(update.effective_user.id, "weight", update.message.text)
    await update.message.reply_text("–Ø–∫–∏–π —É —Ç–µ–±–µ –∑—Ä—ñ—Å—Ç —É —Å–º?")
    return HEIGHT

async def set_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_user(update.effective_user.id, "height", update.message.text)
    await update.message.reply_text("–û—Ü—ñ–Ω–∏ —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏:", reply_markup=level_keyboard)
    return LEVEL

async def set_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_user(update.effective_user.id, "level", update.message.text)
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä –º–æ–∂–µ—à –∑–∞–¥–∞—Ç–∏ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è:", reply_markup=menu_keyboard)
    return MENU

async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    profile = get_profile(update.effective_user.id)
    user_question = update.message.text
    prompt = (
        f"–¢–∏ ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ñ—ñ—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é. "
        f"–°—Ç–∞—Ç—å: {profile.get('gender')}, –≤—ñ–∫: {profile.get('age')}, "
        f"–≤–∞–≥–∞: {profile.get('weight')} –∫–≥, –∑—Ä—ñ—Å—Ç: {profile.get('height')} —Å–º, "
        f"–º–µ—Ç–∞: {profile.get('meta')}, —Ä—ñ–≤–µ–Ω—å: {profile.get('level')}. "
        f"–ü–∏—Ç–∞–Ω–Ω—è: {user_question}"
    )

    try:
        headers = {
            "Authorization": f"Bearer {os.getenv('OPENROUTER_API_KEY')}",
            "Content-Type": "application/json"
        }
        data = {
            "model": "meta-llama/llama-3-8b-instruct",
            "messages": [
                {"role": "user", "content": prompt}
            ]
        }
        response = requests.post("https://openrouter.ai/api/v1/chat/completions", json=data, headers=headers)
        res = response.json()
        reply = res["choices"][0]["message"]["content"]
    except Exception as e:
        reply = f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {e}"

    await update.message.reply_text(reply)
    return MENU

if __name__ == '__main__':
    app = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            META: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_meta)],
            GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_gender)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_age)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_weight)],
            HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_height)],
            LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_level)],
            MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
        },
        fallbacks=[]
    )
    app.add_handler(conv)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    app.run_polling()
